


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ; * File      : context_rvds.S
    3 00000000         ; * This file is part of RT-Thread RTOS
    4 00000000         ; * COPYRIGHT (C) 2006 - 2018, RT-Thread Development Tea
                       m
    5 00000000         ; *
    6 00000000         ; * The license and distribution terms for this file may
                        be
    7 00000000         ; * found in the file LICENSE in this distribution or at
                       
    8 00000000         ; * http://www.rt-thread.org/license/LICENSE
    9 00000000         ; *
   10 00000000         ; * Change Logs:
   11 00000000         ; * Date           Author       Notes
   12 00000000         ; * 2009-01-17     Bernard      first version.
   13 00000000         ; * 2012-01-01     aozima       support context switch l
                       oad/store FPU register.
   14 00000000         ; * 2013-06-18     aozima       add restore MSP feature.
                       
   15 00000000         ; * 2013-06-23     aozima       support lazy stack optim
                       ized.
   16 00000000         ; * 2018-07-24     aozima       enhancement hard fault e
                       xception handler.
   17 00000000         ; */
   18 00000000         
   19 00000000         ;/**
   20 00000000         ; * @addtogroup cortex-m4
   21 00000000         ; */
   22 00000000         ;/*@{*/
   23 00000000         
   24 00000000 E000ED08 
                       SCB_VTOR
                               EQU              0xE000ED08  ; Vector Table Offs
                                                            et Register
   25 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; interrupt control
                                                             state register
   26 00000000 E000ED20 
                       NVIC_SYSPRI2
                               EQU              0xE000ED20  ; system priority r
                                                            egister (2)
   27 00000000 00FF0000 
                       NVIC_PENDSV_PRI
                               EQU              0x00FF0000  ; PendSV priority v
                                                            alue (lowest)
   28 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; value to trigger 
                                                            PendSV exception
   29 00000000         
   30 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   31 00000000                 THUMB
   32 00000000                 REQUIRE8
   33 00000000                 PRESERVE8
   34 00000000         
   35 00000000                 IMPORT           rt_thread_switch_interrupt_flag
   36 00000000                 IMPORT           rt_interrupt_from_thread



ARM Macro Assembler    Page 2 


   37 00000000                 IMPORT           rt_interrupt_to_thread
   38 00000000         
   39 00000000         ;/*
   40 00000000         ; * rt_base_t rt_hw_interrupt_disable();
   41 00000000         ; */
   42 00000000         rt_hw_interrupt_disable
                               PROC
   43 00000000                 EXPORT           rt_hw_interrupt_disable
   44 00000000 F3EF 8010       MRS              r0, PRIMASK
   45 00000004 B672            CPSID            I
   46 00000006 4770            BX               LR
   47 00000008                 ENDP
   48 00000008         
   49 00000008         ;/*
   50 00000008         ; * void rt_hw_interrupt_enable(rt_base_t level);
   51 00000008         ; */
   52 00000008         rt_hw_interrupt_enable
                               PROC
   53 00000008                 EXPORT           rt_hw_interrupt_enable
   54 00000008 F380 8810       MSR              PRIMASK, r0
   55 0000000C 4770            BX               LR
   56 0000000E                 ENDP
   57 0000000E         
   58 0000000E         ;/*
   59 0000000E         ; * void rt_hw_context_switch(rt_uint32 from, rt_uint32 
                       to);
   60 0000000E         ; * r0 --> from
   61 0000000E         ; * r1 --> to
   62 0000000E         ; */
   63 0000000E         rt_hw_context_switch_interrupt
   64 0000000E                 EXPORT           rt_hw_context_switch_interrupt
   65 0000000E         rt_hw_context_switch
                               PROC
   66 0000000E                 EXPORT           rt_hw_context_switch
   67 0000000E         
   68 0000000E         ; set rt_thread_switch_interrupt_flag to 1
   69 0000000E 4A43            LDR              r2, =rt_thread_switch_interrupt
_flag
   70 00000010 6813            LDR              r3, [r2]
   71 00000012 2B01            CMP              r3, #1
   72 00000014 D004            BEQ              _reswitch
   73 00000016 F04F 0301       MOV              r3, #1
   74 0000001A 6013            STR              r3, [r2]
   75 0000001C         
   76 0000001C 4A40            LDR              r2, =rt_interrupt_from_thread ;
                                                             set rt_interrupt_f
                                                            rom_thread
   77 0000001E 6010            STR              r0, [r2]
   78 00000020         
   79 00000020         _reswitch
   80 00000020 4A40            LDR              r2, =rt_interrupt_to_thread ; s
                                                            et rt_interrupt_to_
                                                            thread
   81 00000022 6011            STR              r1, [r2]
   82 00000024         
   83 00000024 4840            LDR              r0, =NVIC_INT_CTRL ; trigger th
                                                            e PendSV exception 
                                                            (causes context swi
                                                            tch)



ARM Macro Assembler    Page 3 


   84 00000026 F04F 5180       LDR              r1, =NVIC_PENDSVSET
   85 0000002A 6001            STR              r1, [r0]
   86 0000002C 4770            BX               LR
   87 0000002E                 ENDP
   88 0000002E         
   89 0000002E         ; r0 --> switch from thread stack
   90 0000002E         ; r1 --> switch to thread stack
   91 0000002E         ; psr, pc, lr, r12, r3, r2, r1, r0 are pushed into [from
                       ] stack
   92 0000002E         PendSV_Handler
                               PROC
   93 0000002E                 EXPORT           PendSV_Handler
   94 0000002E         
   95 0000002E         ; disable interrupt to protect context switch
   96 0000002E F3EF 8210       MRS              r2, PRIMASK
   97 00000032 B672            CPSID            I
   98 00000034         
   99 00000034         ; get rt_thread_switch_interrupt_flag
  100 00000034 4839            LDR              r0, =rt_thread_switch_interrupt
_flag
  101 00000036 6801            LDR              r1, [r0]
  102 00000038 B351            CBZ              r1, pendsv_exit ; pendsv alread
                                                            y handled
  103 0000003A         
  104 0000003A         ; clear rt_thread_switch_interrupt_flag to 0
  105 0000003A F04F 0100       MOV              r1, #0x00
  106 0000003E 6001            STR              r1, [r0]
  107 00000040         
  108 00000040 4837            LDR              r0, =rt_interrupt_from_thread
  109 00000042 6801            LDR              r1, [r0]
  110 00000044 B191            CBZ              r1, switch_to_thread ; skip reg
                                                            ister save at the f
                                                            irst time
  111 00000046         
  112 00000046 F3EF 8109       MRS              r1, psp     ; get from thread s
                                                            tack pointer
  113 0000004A         
  114 0000004A                 IF               {FPU} != "SoftVFP"
  115 0000004A F01E 0F10       TST              lr, #0x10   ; if(!EXC_RETURN[4]
                                                            )
  116 0000004E BF08 ED21 
              8B10             VSTMFDEQ         r1!, {d8 - d15} ; push FPU regi
                                                            ster s16~s31
  117 00000054                 ENDIF
  118 00000054         
  119 00000054 E921 0FF0       STMFD            r1!, {r4 - r11} ; push r4 - r11
                                                             register
  120 00000058         
  121 00000058                 IF               {FPU} != "SoftVFP"
  122 00000058 F04F 0400       MOV              r4, #0x00   ; flag = 0
  123 0000005C         
  124 0000005C F01E 0F10       TST              lr, #0x10   ; if(!EXC_RETURN[4]
                                                            )
  125 00000060 BF08 2401       MOVEQ            r4, #0x01   ; flag = 1
  126 00000064         
  127 00000064 F841 4D04       STMFD            r1!, {r4}   ; push flag
  128 00000068                 ENDIF
  129 00000068         
  130 00000068 6800            LDR              r0, [r0]



ARM Macro Assembler    Page 4 


  131 0000006A 6001            STR              r1, [r0]    ; update from threa
                                                            d stack pointer
  132 0000006C         
  133 0000006C         switch_to_thread
  134 0000006C 492D            LDR              r1, =rt_interrupt_to_thread
  135 0000006E 6809            LDR              r1, [r1]
  136 00000070 6809            LDR              r1, [r1]    ; load thread stack
                                                             pointer
  137 00000072         
  138 00000072                 IF               {FPU} != "SoftVFP"
  139 00000072 C908            LDMFD            r1!, {r3}   ; pop flag
  140 00000074                 ENDIF
  141 00000074         
  142 00000074 E8B1 0FF0       LDMFD            r1!, {r4 - r11} ; pop r4 - r11 
                                                            register
  143 00000078         
  144 00000078                 IF               {FPU} != "SoftVFP"
  145 00000078 2B00            CMP              r3,  #0     ; if(flag_r3 != 0)
  146 0000007A BF18 ECB1 
              8B10             VLDMFDNE         r1!, {d8 - d15} ; pop FPU regis
                                                            ter s16~s31
  147 00000080                 ENDIF
  148 00000080         
  149 00000080 F381 8809       MSR              psp, r1     ; update stack poin
                                                            ter
  150 00000084         
  151 00000084                 IF               {FPU} != "SoftVFP"
  152 00000084 F04E 0E10       ORR              lr, lr, #0x10 ; lr |=  (1 << 4)
                                                            , clean FPCA.
  153 00000088 2B00            CMP              r3,  #0     ; if(flag_r3 != 0)
  154 0000008A BF18 F02E 
              0E10             BICNE            lr, lr, #0x10 ; lr &= ~(1 << 4)
                                                            , set FPCA.
  155 00000090                 ENDIF
  156 00000090         
  157 00000090         pendsv_exit
  158 00000090         ; restore interrupt
  159 00000090 F382 8810       MSR              PRIMASK, r2
  160 00000094         
  161 00000094 F04E 0E04       ORR              lr, lr, #0x04
  162 00000098 4770            BX               lr
  163 0000009A                 ENDP
  164 0000009A         
  165 0000009A         ;/*
  166 0000009A         ; * void rt_hw_context_switch_to(rt_uint32 to);
  167 0000009A         ; * r0 --> to
  168 0000009A         ; * this fucntion is used to perform the first thread sw
                       itch
  169 0000009A         ; */
  170 0000009A         rt_hw_context_switch_to
                               PROC
  171 0000009A                 EXPORT           rt_hw_context_switch_to
  172 0000009A         ; set to thread
  173 0000009A 4922            LDR              r1, =rt_interrupt_to_thread
  174 0000009C 6008            STR              r0, [r1]
  175 0000009E         
  176 0000009E                 IF               {FPU} != "SoftVFP"
  177 0000009E         ; CLEAR CONTROL.FPCA
  178 0000009E F3EF 8214       MRS              r2, CONTROL ; read



ARM Macro Assembler    Page 5 


  179 000000A2 F022 0204       BIC              r2, #0x04   ; modify
  180 000000A6 F382 8814       MSR              CONTROL, r2 ; write-back
  181 000000AA                 ENDIF
  182 000000AA         
  183 000000AA         ; set from thread to 0
  184 000000AA 491D            LDR              r1, =rt_interrupt_from_thread
  185 000000AC F04F 0000       MOV              r0, #0x0
  186 000000B0 6008            STR              r0, [r1]
  187 000000B2         
  188 000000B2         ; set interrupt flag to 1
  189 000000B2 491A            LDR              r1, =rt_thread_switch_interrupt
_flag
  190 000000B4 F04F 0001       MOV              r0, #1
  191 000000B8 6008            STR              r0, [r1]
  192 000000BA         
  193 000000BA         ; set the PendSV exception priority
  194 000000BA 481C            LDR              r0, =NVIC_SYSPRI2
  195 000000BC F44F 017F       LDR              r1, =NVIC_PENDSV_PRI
  196 000000C0 F8D0 2000       LDR.W            r2, [r0,#0x00] ; read
  197 000000C4 EA41 0102       ORR              r1,r1,r2    ; modify
  198 000000C8 6001            STR              r1, [r0]    ; write-back
  199 000000CA         
  200 000000CA         ; trigger the PendSV exception (causes context switch)
  201 000000CA 4817            LDR              r0, =NVIC_INT_CTRL
  202 000000CC F04F 5180       LDR              r1, =NVIC_PENDSVSET
  203 000000D0 6001            STR              r1, [r0]
  204 000000D2         
  205 000000D2         ; restore MSP
  206 000000D2 4817            LDR              r0, =SCB_VTOR
  207 000000D4 6800            LDR              r0, [r0]
  208 000000D6 6800            LDR              r0, [r0]
  209 000000D8 F380 8808       MSR              msp, r0
  210 000000DC         
  211 000000DC         ; enable interrupts at processor level
  212 000000DC B661            CPSIE            F
  213 000000DE B662            CPSIE            I
  214 000000E0         
  215 000000E0         ; never reach here!
  216 000000E0                 ENDP
  217 000000E0         
  218 000000E0         ; compatible with old version
  219 000000E0         rt_hw_interrupt_thread_switch
                               PROC
  220 000000E0                 EXPORT           rt_hw_interrupt_thread_switch
  221 000000E0 4770            BX               lr
  222 000000E2                 ENDP
  223 000000E2         
  224 000000E2                 IMPORT           rt_hw_hard_fault_exception
  225 000000E2                 EXPORT           HardFault_Handler
  226 000000E2         HardFault_Handler
                               PROC
  227 000000E2         
  228 000000E2         ; get current context
  229 000000E2 F01E 0F04       TST              lr, #0x04   ; if(!EXC_RETURN[2]
                                                            )
  230 000000E6 BF0C            ITE              EQ
  231 000000E8 F3EF 8008       MRSEQ            r0, msp     ; [2]=0 ==> Z=1, ge
                                                            t fault context fro
                                                            m handler.



ARM Macro Assembler    Page 6 


  232 000000EC F3EF 8009       MRSNE            r0, psp     ; [2]=1 ==> Z=0, ge
                                                            t fault context fro
                                                            m thread.
  233 000000F0         
  234 000000F0 E920 0FF0       STMFD            r0!, {r4 - r11} ; push r4 - r11
                                                             register
  235 000000F4                 IF               {FPU} != "SoftVFP"
  236 000000F4 F840 ED04       STMFD            r0!, {lr}   ; push dummy for fl
                                                            ag
  237 000000F8                 ENDIF
  238 000000F8 F840 ED04       STMFD            r0!, {lr}   ; push exec_return 
                                                            register
  239 000000FC         
  240 000000FC F01E 0F04       TST              lr, #0x04   ; if(!EXC_RETURN[2]
                                                            )
  241 00000100 BF0C            ITE              EQ
  242 00000102 F380 8808       MSREQ            msp, r0     ; [2]=0 ==> Z=1, up
                                                            date stack pointer 
                                                            to MSP.
  243 00000106 F380 8809       MSRNE            psp, r0     ; [2]=1 ==> Z=0, up
                                                            date stack pointer 
                                                            to PSP.
  244 0000010A         
  245 0000010A B500            PUSH             {lr}
  246 0000010C F7FF FFFE       BL               rt_hw_hard_fault_exception
  247 00000110 F85D EB04       POP              {lr}
  248 00000114         
  249 00000114 F04E 0E04       ORR              lr, lr, #0x04
  250 00000118 4770            BX               lr
  251 0000011A                 ENDP
  252 0000011A         
  253 0000011A 00 00           ALIGN            4
  254 0000011C         
  255 0000011C                 END
              00000000 
              00000000 
              00000000 
              E000ED04 
              E000ED20 
              E000ED08 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\context_rvds.d -o.\objects\context_rvds.o -I.\RTE\_rt
_thread_stm32f429 -ID:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS
\Device\ST\STM32F4xx\Include -ID:\Keil_v5\ARM\CMSIS\Include --predefine="__UVIS
ION_VERSION SETA 525" --predefine="STM32F429xx SETA 1" --list=.\listings\contex
t_rvds.lst ..\..\libcpu\arm\cortex-m4\context_rvds.S



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 30 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      None
Comment: .text unused
HardFault_Handler 000000E2

Symbol: HardFault_Handler
   Definitions
      At line 226 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 225 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: HardFault_Handler used once
PendSV_Handler 0000002E

Symbol: PendSV_Handler
   Definitions
      At line 92 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 93 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: PendSV_Handler used once
_reswitch 00000020

Symbol: _reswitch
   Definitions
      At line 79 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 72 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: _reswitch used once
pendsv_exit 00000090

Symbol: pendsv_exit
   Definitions
      At line 157 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 102 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: pendsv_exit used once
rt_hw_context_switch 0000000E

Symbol: rt_hw_context_switch
   Definitions
      At line 65 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 66 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch used once
rt_hw_context_switch_interrupt 0000000E

Symbol: rt_hw_context_switch_interrupt
   Definitions
      At line 63 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 64 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch_interrupt used once
rt_hw_context_switch_to 0000009A

Symbol: rt_hw_context_switch_to



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 170 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 171 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_context_switch_to used once
rt_hw_interrupt_disable 00000000

Symbol: rt_hw_interrupt_disable
   Definitions
      At line 42 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 43 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_disable used once
rt_hw_interrupt_enable 00000008

Symbol: rt_hw_interrupt_enable
   Definitions
      At line 52 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 53 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_enable used once
rt_hw_interrupt_thread_switch 000000E0

Symbol: rt_hw_interrupt_thread_switch
   Definitions
      At line 219 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 220 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_interrupt_thread_switch used once
switch_to_thread 0000006C

Symbol: switch_to_thread
   Definitions
      At line 133 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 110 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: switch_to_thread used once
12 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 25 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 83 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 201 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 28 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 84 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 202 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

NVIC_PENDSV_PRI 00FF0000

Symbol: NVIC_PENDSV_PRI
   Definitions
      At line 27 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 195 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: NVIC_PENDSV_PRI used once
NVIC_SYSPRI2 E000ED20

Symbol: NVIC_SYSPRI2
   Definitions
      At line 26 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 194 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: NVIC_SYSPRI2 used once
SCB_VTOR E000ED08

Symbol: SCB_VTOR
   Definitions
      At line 24 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 206 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: SCB_VTOR used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

rt_hw_hard_fault_exception 00000000

Symbol: rt_hw_hard_fault_exception
   Definitions
      At line 224 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 246 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
Comment: rt_hw_hard_fault_exception used once
rt_interrupt_from_thread 00000000

Symbol: rt_interrupt_from_thread
   Definitions
      At line 36 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 76 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 108 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 184 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

rt_interrupt_to_thread 00000000

Symbol: rt_interrupt_to_thread
   Definitions
      At line 37 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 80 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 134 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 173 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

rt_thread_switch_interrupt_flag 00000000

Symbol: rt_thread_switch_interrupt_flag
   Definitions
      At line 35 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
   Uses
      At line 69 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 100 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S
      At line 189 in file ..\..\libcpu\arm\cortex-m4\context_rvds.S

4 symbols
356 symbols in table
